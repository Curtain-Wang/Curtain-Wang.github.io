<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[程序员日记（三）]]></title>
    <url>%2F2019%2F10%2F08%2F%E7%A8%8B%E5%BA%8F%E5%91%98%E6%97%A5%E8%AE%B0-%E4%B8%89%2F</url>
    <content type="text"><![CDATA[&#8195;&#8195;今天是国庆假期回来上班的第一天，这一天都心不在焉的，脑子很乱，因为看不见未来。我有点怀疑我是不是不适合做这行，这行是一个钻研技术的活，要想有一个较高的成就，就必须对自己充满信心，就仿佛辰东的《遮天》里面，要想成帝，就必须一直保持一颗同阶无敌的心，但是现在的我就仿佛失去信心一般。觉得我不适合这条“修仙路”。原因有很多，很杂很乱，这里就把能理出来的理一下把：&#8195;&#8195;第一点也是最根本的一点，对于钻研技术这方面，我并不是百分百热爱，下班也没有去刻意钻研某些不懂的技术方面的东西，每天上下班坐地铁的时候，几乎都是听歌，看视频，感觉自己没有一颗热爱钻研的心，可能以前有把，以前有的时候会因为某个数学问题不懂，然后下课，放学都会去想解决办法，那时候是发自内心的想去解决心中的疑惑。现在却很难找到当初的那种感觉，可能是因为经历的一些事情，承担着学生时代所不同的压力还有比以前更多的诱惑把。&#8195;&#8195;第二点就是感觉自己有一颗创业的心，看了非诚勿扰很多成功人士的经历之后，我愈发觉得自己也可以做到这样。我感觉上班终究是替别人打工，为自己做才能发挥自己百分之百的动力，既然如此，何不自己出来单干呢，从小本生意坐起。现在能想到创业的起点有三条，一条是加盟申屠家蛋包饭，加盟费5W左右，有一天点外卖的时候点到这家外卖感觉味道不错而且便宜。或者就是天津有个钧哥，最近开了一家米线和牛肉饭的店，销量还不错，可以向他取取经，加盟一下也可以。最后有一条就是省厅附近有一家卖烧鸡的小饭店，去吃过一次，味道不错，每天生意也很好感觉。店么，就开在老家的城里或者就开在镇上，大学这几年，每次放假回来，镇上几乎都会发生一些变化，现在家乡的镇上相比7，8年前的城里可以说不相上下。感觉家乡的发展潜力巨大，有很多创业的机会。&#8195;&#8195;最后一点可能也是比较勉强的一点，就是我对自己的认知。我是一个可以说是聪明的人，不然也不会考上我们县最好的高中，同样这份聪明再准确点可以加个形容词就是“小”，我可以靠小聪明加上半吊子的努力考上最好的高中，但是却考不了理想的大学，这仿佛在警示我，后面的道路如果还只是半吊子的努力的话，最后终究也成不了什么大事。所以，如果是创业的话，我想我会付出百分百的努力，加上我的一点点小聪明再加上周围人失败的经验，我认为我会成功。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>程序员日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[19年9月工作总结]]></title>
    <url>%2F2019%2F09%2F30%2F19%E5%B9%B49%E6%9C%88%2F</url>
    <content type="text"><![CDATA[工作总结&#8195;&#8195;这个月大部分时间都在政法委，忙一个叫做社会治安的项目。虽然这个项目的后端是我一个人写的，但是很多时候领导都会给予我一些指点，所以完成的比较顺利。技术方面收获还不错，但是总感觉难度不是很大，技术简单，麻烦的是业务，可能这也是工作所必须要锻炼的东西吧。也有可能是入职时间还是不长，暂时还接触不到高技术层面的锻炼。 学习总结&#8195;&#8195;技术层面:1.因为之前对于日期格式比较抵触，后来多练习了一些关于日期处理的，并写了博客，现在对日期格式处理起来不像以前那么困难了。2在学Spring底层的一些知识，这个路还很长，得学好久。生活层面:准备在租的地方自己做饭了以后，认识一个合租的，饭做的不错，我和他关系处理的也比较好，他也说会教我做饭啥的，东西都买好了，就等国庆回来做了。 下个月目标&#8195;&#8195;下个月工作和学习安排：&#8195;&#8195;&#8195;&#8195;（1）省厅的有新的工作任务，现在已经完成30%，剩余等国庆回来做&#8195;&#8195;&#8195;&#8195;（2）学习Spring源码]]></content>
      <categories>
        <category>工作总结</category>
      </categories>
      <tags>
        <tag>工作总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序员日记(二)]]></title>
    <url>%2F2019%2F09%2F17%2F%E7%A8%8B%E5%BA%8F%E5%91%98%E6%97%A5%E8%AE%B0-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[&#8195;&#8195;今天是来到中奥的第二个月整，非常巧，刚好今天完成任务早也不想做其他的，索性就写篇日记。近一个月我在两个地方办过公，一个是在省厅，一个是在政法委。&#8195;&#8195;在省厅的这段时间，认识了一个很有趣的小姐姐，阿惠，人很幽默，直爽，我很喜欢，当然只是性格方面。我和她的关系吧，我感觉还蛮好的，每天早上我都会给她带包子+加热的豆奶，没事的话都会一起下班走。那个卖早餐的老奶奶跟我很熟，每天我一到她的早餐铺，她都回笑盈盈的说一句：“又来啦”，她也知道我每天都会给一个女孩子带包子，有的时候阿惠不需要带早饭的时候，老奶奶还会特意地问我一句，今天她不吃早饭么，哈哈。我还有个带我的leader，也是个小姐姐，凤娟，人蛮好的，挺单纯的，也通情达理，但是有的时候也会跟我急。记得有一次我下班前去上了个厕所，听见凤娟在找我，然后他们说我走了，她突然生气了。。。后来说清楚了，是因为每天我都是和阿惠直接下班走了，也没提前和她汇报一下今天完成了什么，这会让她第二天不知道怎么给我安排任务。现在就是会每天给她发个我今天完成了什么的一段文字，如果她不知晓我今天干了什么的话。&#8195;&#8195;后来就和凤娟一起来到了政法委，开始一个人写一个项目的后端，虽然是一个人写，但是很多时候凤娟都会指点我怎么写比较好，所以完成的还算比较顺利。在政法委认识了和我对接的前端，一开始和他对接的时候，会有各种冲突，因为字段，数据格式等等的问题，后来今天一段时间的磨合之后，现在好了很多。但是还是得吐槽一下，政法委附近真的没啥好吃的，每天中饭吃得都有点勉强。。希望早日回到省厅或者其他地方把~~]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>程序员日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[19年8月工作总结]]></title>
    <url>%2F2019%2F09%2F03%2F19%E5%B9%B48%E6%9C%88%2F</url>
    <content type="text"><![CDATA[工作总结&#8195;&#8195;这一整个月都在省厅，期间写过四五次接口，难度不大，都能在规定时间内完成，每次也能学到一些新东西。因为入职不久，活也不是很多，总的来说 这个月还是蛮轻松的。 学习总结&#8195;&#8195;技术层面:1.学会Springboot下多数据源的配置，后来根据公司的代码总结了三种方式配置多数据源，并写了博客。2.java代码调用http接口，参数格式的设置，这个明天写一下博客复习一遍。3.接触过复杂的数据库查询语句，因为业务逻辑比较复杂，但是一个月下来，也了解了七七八八等等。生活层面:认识了很多很好的同事，能从他们那学到一些优点，比如看到一个同事比较能坚持写博客啥的，后来自己也觉得这个是一个很好的习惯，自己就搭了一个自己的博客，每次有所收获的时候就会通过写博客的方式记录下来 下个月目标&#8195;&#8195;下个月工作和学习安排：&#8195;&#8195;&#8195;&#8195;（1）去政法委那边协助开发，具体任务待定&#8195;&#8195;&#8195;&#8195;（2）学习Spring源码]]></content>
      <categories>
        <category>工作总结</category>
      </categories>
      <tags>
        <tag>工作总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Springboot下配置多个数据源的三种方式]]></title>
    <url>%2F2019%2F08%2F30%2F%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E8%BF%9E%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[单数据源的配置很简单，就是在yml或者properties文件中配置一下就行，以下示例是yml文件单数据源mysql的配置(配置了阿里的druid数据库连接池)： 1234567spring datasource type: com.alibaba.druid.pool.DruidDataSource url: jdbc:mysql://localhost:3306/test username: admin password: 123456 driver-class-name: com.mysql.jdbc.Driver 第一种方式在yml或者properties文件配置一下以及创建一个除了默认db以外的一个java配置文件，这里就在上面的基础上再加一个Oracle数据库，以下是示例代码：yml中​1234567891011121314spring datasource defaultDb: type: com.alibaba.druid.pool.DruidDataSource url: jdbc:mysql://localhost:3306/test username: admin password: 123456 driver-class-name: com.mysql.jdbc.Driver secondDb: type: com.alibaba.druid.pool.DruidDataSource url: jdbc:oracle.thin:@localhost:1521/test1 username: admin password: 123456 driver-class-name: oracle.jdbc.driver.OracleDriver 创建一个java文件，这里为SecondDbConfigurer.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960@Configurationpublic class SecondDbConfigurer&#123; //注入第二个数据库的信息 @Value($&#123;spring.dataspurce.secondDb.url&#125;) private String url; @Value($&#123;spring.dataspurce.secondDb.username&#125;) private String username; @Value($&#123;spring.dataspurce.secondDb.password&#125;) private String password; @Value($&#123;spring.dataspurce.secondDb.driver-class-name&#125;) private String driverClass; //创建数据源 @Bean（name = &quot;secondDb&quot;） @ConfigurationProperties(prefix = &quot;spring.datasource.secondDb&quot;) @Primary public DataSource secondDbDataSource()&#123; DruidDataSource datasource = new DruidDataSource(); datasource.setUrl(url); datasource.setUsername(username); datasource.setPassword(password); datasource.setDriverClassName(driverClass); return DruidDataSourceBuiler.create().build(); &#125; //创建SqlSessionFactory @Bean public SqlSessionFactory sqlSessionFactoryBeanSecondDb(@Qualifier(&quot;secondDb&quot;) DataSource secondDb) throws Exception&#123; SqlSessionFactoryBean factory = new SqlSessionFactoryBean(); factory.setDatasource(secondDb); //添加xml映射路径 ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(); factory.setMapperLocations(resolver.getResources (&quot;classpath*:com/**/mapper/*.xml&quot;)); return factory.getObject(); &#125; //配置事物管理器 @Bean public DataSourceTransactionManager secondDbTransactionManager(@Qualifier(&quot;secondDb&quot;) DataSource secondDb)&#123; return new DataSourceTransactionManager(secondDb); &#125; //配置包扫描 @Bean public MapperScannerConfigurer mapperScannerConfigurerSecondDb()&#123; MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer(); mapperScannerConfigurer.setSqlSessionFactoryBeanName (&quot;sqlSessionFactoryBeanSecondDb&quot;); mapperScannerConfigurer.setBasePackage(&quot;com.**.dao.mapper&quot;); return mapperScannerConfigurer; &#125;&#125; 之后你就可以当作一个数据源一样正常地通过mybatsi映射来操作数据库了。 第二种方式配置多个JdbcTemplate。在yml文件中把变量值设置了： 123456789101112spring datasource firstDb: url: jdbc:mysql://localhost:3306/test username: admin password: 123456 driver-class-name: com.mysql.jdbc.Driver secondDb: url: jdbc:oracle.thin:@localhost:1521/test1 username: admin password: 123456 driver-class-name: oracle.jdbc.driver.OracleDriver 然后创建一个JdbcLinkConfig.java文件: 123456789101112131415161718192021222324252627282930313233343536@Configurationpublic class JdbcLinkConfig &#123; //创建两个数据源 @Bean(name=&quot;firstDataSource&quot;) @Qualifier(&quot;firstDataSource&quot;) @ConfigurationProperties(prefix=&quot;spring.datasource.firstDb&quot;) public DataSource firstDataSource() &#123; return DatasourceBuilder.create().build(); &#125; @Bean(name=&quot;secondDataSource&quot;) @Qualifier(&quot;secondDataSource&quot;) @Primary @ConfigurationProperties(prefix=&quot;spring.datasource.secondDb&quot;) public DataSource secondDataSource() &#123; return DatasourceBuilder.create().build(); &#125; //根据两个数据源创建两个jdbcTemplate @Bean(name=&quot;firstJdbcTemplate&quot;) public JdbcTemplate firstJdbcTemplate(@Qualifier(&quot;firstDataSource&quot;)DataSource datasource)&#123; return new JdbcTemplate(datasource); &#125; @Bean(name=&quot;secondJdbcTemplate&quot;) public JdbcTemplate firstJdbcTemplate(@Qualifier(&quot;secondJdbcTemplate&quot;)DataSource datasource)&#123; return new JdbcTemplate(datasource); &#125; &#125; 之后你需要操作哪个数据源你就注入哪个数据源对应的jdbcTemplate操作就行。 第三种方式几个数据源就创建几个连接工厂和对应的操作类。这里就创建一个为例，其他的照猫画葫芦就行。创建FirstFactory.java 12345678910111213141516171819202122232425262728293031323334public class FirstFactory &#123; private static final Logger logger = Logger.getLogger(FirstFactory.class); private static final FirstFactory factory = new FirstFactory(); private static DataSource datasource = null; public static FirstFactory getInstance() &#123; return factory; &#125; //获取数据库连接 public Connection getConnection() throw SQLException &#123; if(null == dataSource) &#123; configDataSource(); &#125; return dataSource.getConnection(); &#125; //配置数据源 private static void configDataSource() &#123; try&#123; DruidDataSource druidDataSource = new DruidDataSource(); druidDataSource.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;); druidDataSource.setUsername(&quot;admin&quot;); druidDataSource.setPassword(&quot;123456&quot;); druidDataSource.setUrl(&quot;jdbc:mysql://localhost:3306/test&quot;); datasource = druidDataSource; &#125; catch (Exception e) &#123; logger.error(&quot;First数据库配置异常:&quot; + e.getMessage); e.printStackTrace(); &#125; &#125;&#125; 创建FirstQuery.java这个类就是包装了一些对数据库的一些增删改查的操作。这里就简单写几个常用的。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138public class FirstQuery &#123; private static final Logger logger = Logger.getLogger(FirstQuery.class); private FirstFactory fst = null; public FirstQuery() &#123; fst = FirstFactory.getInstance(); &#125; //基于apache dbutils封装查询方法获取查询实例 private QueryRunner getRunner() &#123; return new QueryRunner(true); &#125; //设置java原始类型 private static List&lt;Class&lt;?&gt;&gt; primitiveClasses = new ArrayList&lt;Class&lt;?&gt;&gt;(); static &#123; primitiveClasses.add(Long.class); primitiveClasses.add(Integer.class); primitiveClasses.add(String.class); primitiveClasses.add(java.util.Date.class); primitiveClasses.add(java.sql.Date.class); primitiveClasses.add(java.sql.Timestamp.class); &#125; //获取数据库连接 public Connection getConnection() throws SQLException &#123; return this.fst.getConnection(); &#125; //创建表、删除数据、插入数据、修改数据--不需要额外参数的 public void executeUpdate(String sql) throws SQLException &#123; Connection conn = null; Statement stmt = null; try &#123; conn = this.getConnection(); stmt = conn.createStatement(); stmt.executeUpdate(sql); &#125; catach (SQLException e) &#123; throw e; &#125; finally &#123; if(stmt != null)&#123; this.close(conn, stmt, null); &#125; &#125; &#125; //创建表、删除数据、插入数据、修改数据--需要额外参数的 public void executeUpdate(String sql, Object... params) throws SQLException &#123; Connection conn = null; try&#123; conn = this.getConnection(); this.getRunner().update(conn, sql, params); &#125; catch (SQLException e) &#123; this.rollbackt(conn); throw e; &#125; finally &#123; this.close(conn); &#125; &#125; //根据参数查询单条数据里面的一些字段，无参的话params为new Object[]&#123;&#125; public Map&lt;String, Object&gt; queryMap(String sql, Object... params) &#123; Map&lt;String, Object&gt; ret = null; Connection conn = null; try&#123; conn = this.getConnection(); ret = this.getRunner().query(conn, sql, new MapHandler(), params); &#125; catach (SQLException e) &#123; logger.info(&quot;DBUtil execute sql: &quot; + sql); &#125; finally &#123; this.close(conn); &#125; return ret; &#125; //根据参数查询多条数据里面的一些字段，无参的话params为new Object[]&#123;&#125; public Map&lt;String, Object&gt; queryMapList(String sql, Object... params) &#123; List&lt;Map&lt;String, Object&gt;&gt; ret = null; Connection conn = null; try&#123; conn = this.getConnection(); ret = this.getRunner().query(conn, sql, new MapHandler(), params); &#125; catach (SQLException e) &#123; logger.info(&quot;DBUtil execute sql: &quot; + sql); &#125; finally &#123; this.close(conn); &#125; return ret; &#125; //根据参数查询单条数据（多条数据参考上面把ret的类型改成List&lt;T&gt;就行）并转换成指定对象，无参的 //话params为new Object[]&#123;&#125;. public &lt;T&gt; T queryBean(Class&lt;T&gt; beanClass, String sql, Object... params) &#123; T ret = null; Connection conn = null; try&#123; conn = this.getConnection(); ret = this.getRunner().query(conn, sql, isPrimitive(beanClass)?new ScalarHandler&lt;T&gt;(1): new BeanHandler&lt;T&gt;(beanClass), params); &#125; catch (SQLException e)&#123; logger.info(&quot;DBUtil execute sql: &quot; + sql); rollback(conn); &#125; finally &#123; close(conn); &#125; &#125; //根据参数查询个数，无参的话params为new Object[]&#123;&#125; public Long queryCount(String sql, Object... params) &#123; return this.queryBean(Long.class, sql, params); &#125; //关闭数据库连接 public void close(Connection conn)&#123; DbUtils.closeQuietly(conn); &#125; //关闭所有链接 public void close(Connection conn, Statement stmt, Result rs) &#123; DbUtils.closeQuietly(conn, stmt, rs); &#125; //数据库操作回滚 public void rollback(Connection conn) &#123; try&#123; DbUtils.rollback(conn); &#125; catch(SQLException e) &#123; e.printStackTrace(); &#125; &#125; private boolean isPrimitive(Class&lt;?&gt; cla) &#123; return cla.isPrimitive() || primitiveClasses.contains(cla); &#125;&#125; 关于这两个java类，我们可以写两个他们的父接口，这样再配置数据源的时候 ，直接实现父接口就行。 总结第一种方法可以让所有的数据源使用mybatis映射，而第二第三种就得需要在java文件里面写sql语句，关闭连接啥的。个人比较中意第一种方法~~ 有几点要注意一下：1.上面关于数据库连接的配置，只是一个样例，具体得看你自己的数据库信息。 2.第一种方法中java配置文件中有两个路径的配置，第一个是xml映射文件的路径，第二个是对应的java文件的路径。 3.这也是我第一次写多数据源，如果有啥说的不对的或者遇到啥问题，欢迎点评建议询问~]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编辑距离的动态规划算法（滚动数组优化)]]></title>
    <url>%2F2019%2F08%2F21%2F%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%E7%9A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[滚动数组优化是动态规划中常见的技巧，特点能降低空间复杂度。时间复杂度不变。 1234567891011121314151617181920212223242526272829303132333435public static void main(String[] args) &#123; Scanner input = new Scanner(System.in); String A = input.next(); char[] A1 = A.toCharArray(); String B = input.next(); char[] B1 = B.toCharArray(); int[] C_OLD = new int[B.length()+1];//储存表格的第i-1行 表格在另一个未优化博客上 int[] C_NEW = new int[A.length()+1];//储存表格的第i行 for (int i = 0; i &lt;= B.length(); i++) C_OLD[i] = i; for (int i = 1; i &lt;= A.length(); i++) &#123; C_NEW[0] = i; for (int j = 1; j &lt;= B.length(); j++) //此for循环在填写第i行的数据 &#123; if (A1[i-1] == B1[j-1]) C_NEW[j] = C_OLD[j-1]; else C_NEW[j] = min(C_NEW[j-1], C_OLD[j], C_OLD[j-1]) + 1; &#125; C_OLD = C_NEW.clone(); //将第i行的数据给OLD 然后继续填写NEW的数据 &#125; System.out.println(C_NEW[B.length()]);&#125; private static int min(int a, int b, int c) &#123; if (a &lt; b) b = a; if (c &lt; b) b = c; return b;&#125;]]></content>
      <categories>
        <category>数据结构与算法分析</category>
      </categories>
      <tags>
        <tag>数据结构与算法分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[程序员日记（一）]]></title>
    <url>%2F2019%2F08%2F17%2F%E7%A8%8B%E5%BA%8F%E5%91%98%E6%97%A5%E8%AE%B0-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[&#8195;&#8195;今天是我来新公司的第三十天，刚好是周六，也刚好得上班（我们公司是大小休）。由于刚进公司不久再加上自己比较菜，所以一天的活也不多，更何况今天是周六，所以，差不多忙完了今天工作的事情之后，心血来潮想写一写日记。&#8195;&#8195;今年4月16号的时候，我从上一家公司办完离职手续。为什么要离职呢？最主要的一点就是离家太远，我家是住在浙江天台的一个小县城，大学是在天津上的，大四实习理所当然也就在天津。实习的这家公司挺不错的，同事们都很好，还有几个一起实习的、能交心的小伙伴。本来想着是在天津待个2，3年再走的，奈何今年清明假期家里来了一通电话，告我毕业之后必须去杭州发展，这是亲戚一致决定的结果。只要是我觉得是为了我好的安排，我一般都会听从，包括这一次。&#8195;&#8195;由于房子的租期是到5月15号截至，离职后的一个月里，没有别的事情的话我就待在我租的屋子里写毕设、早中晚各背2，3道面试题、其余时间看看视频，打打游戏日子过得不亦乐乎。&#8195;&#8195;很快这一个月就过去了，回到学校，和同学们过着大学毕业前最后一段时光，无非就是改毕设、开黑、出去聚餐。日子过得也是相当的滋润，很快也就毕业了。毕业聚餐那天，几乎向班里的每个人都敬了一杯酒，说了些话。现在想来可能那些话有点煽情，但是当时由于喝了点酒，脸皮也就厚了点，再加上以后可能也没机会说了，索性就和每个人都喝了一杯，或多或少地说了几句话。&#8195;&#8195;毕业后的第一天我就回到了我的老家，刚好那天我的舅舅也从杭州回到了老家。我的舅舅在我眼里就是一位成功人士，我走的很多路都是他帮我规划的，因为我感觉他的格局比我大，眼光比我长远，听他的总没错。当天晚上，亲戚几个就一起吃了个饭，一是为我毕业的祝贺，二就是和我商量接下来的安排。回家的第二天，舅舅问我要了一份我的简历，他要帮我投。&#8195;&#8195;在家后的半个月，我就和我的老家的朋友们聚了几次，也都了解了各自的状况，大多都是开网店的，也都开的还不错。后来通过了我舅舅给我推的那家公司的面试，就准备赴杭上班。&#8195;&#8195;入职的前两周，都是在总部，每天的任务就是看框架代码，身边也没有个说话的人，连同事是谁都不知道，领导的面都没见过，平时偶尔会在微信里面沟通一两句。那段时间真的是我至今为止最纠结的一段时间，由于每天的任务性质，会很容易进入一种冥想的状态。有一次就想到我和我的朋友的处境，一对比就坏了事情，人家开网店的日子过的是真的自由，赚的钱也比我多。之后就不止一次的萌发离职创业的冲动，还好每次都制止住了。&#8195;&#8195;熬过那两周之后，生活也就步入了“正轨”，也都想通了。后来被安排到省厅接触具体的项目，也认识了几个有趣的朋友，日子也就慢慢地好了起来。&#8195;&#8195;最后，我相信只要我能坚持在这行干下去，不求每天下班能回去继续钻研工作的内容，只要能做到上班的时候全身心投入进去好好完成公司安排的任务，只要是不停的在学习，终有一天我也能成为所谓的大神。就像《暗时间》的作者刘未鹏说的———一件事情如果你能够坚持做8年，那么不管效率和频率多低，最终总能取得一些很可观的收益]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>程序员日记</tag>
      </tags>
  </entry>
</search>
